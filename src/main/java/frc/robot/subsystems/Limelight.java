// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Limelight extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    //limelight values
    static NetworkTable ll;
    static NetworkTableEntry tx;
    static NetworkTableEntry ty;
    static NetworkTableEntry ta;
    static NetworkTableEntry tv;
    static NetworkTableEntry LED;
    static NetworkTableEntry camMode;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //for distance
    private final double a1 = 0; //mounting angle of camera
    private double a2 = 0; //y angle will grab from method
    private final double h1 = 0; //height of camera above floor
    private final double h2 = 0; //height of target
    public Limelight() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ll = NetworkTableInstance.getDefault().getTable("limelight");
        tx = ll.getEntry("tx");
        ty = ll.getEntry("ty");
        ta  = ll.getEntry("ta");
        tv = ll.getEntry("tv");
        LED = ll.getEntry("ledMode");
        camMode = ll.getEntry("camMode");
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    public boolean targetInSight(){
        return (tv.getDouble(0) == 1); //check if target is in sight using network table
    }
    public double getTargetAngleX(){
        return tx.getDouble(0.0); //get X angle off network table
    }
    public double getTargetAngleY(){
        return ty.getDouble(0.0);
    }
    public double getTargetArea(){
        return ta.getDouble(0.0);
    }
    public void setLight(int v){
        LED.setNumber(v);
    }
    public void setMode(int v){
        camMode.setNumber(v);
    }
    public double getDistance(){
        //see http://docs.limelightvision.io/en/latest/cs_estimating_distance.html
        /**
         * equation in document
         * h1 = height of camera above floor
         * h2 = height of target
         * a1 = mounting angle
         * a2 = y aangle of target
         * d = distance
         * 
         * tan(a1+a2) = (h2-h1) / d
         * 
         * d = (h2-h1) / tan(a1+a2)
         */
        
        return (h2-h1)/Math.tan(a1+a2);
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

