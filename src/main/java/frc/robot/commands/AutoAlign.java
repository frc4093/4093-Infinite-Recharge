// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.commands.*;
/**
 *
 */
public class AutoAlign extends Command {
    public double x;
    public double absX;
    //public final double kP = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoAlign() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.limelight.setLight(3);
        Robot.limelight.setMode(0);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //needs some kinda proportional control
        
        if (Robot.limelight.targetInSight()== true){

            x = Robot.limelight.getTargetAngleX();
            absX = Math.abs(x);
            double adjust = (x/27)*.25;
            if (absX>.8){
                if (x > 0){
                    System.out.println(.32+adjust);
                    Robot.drive.arcade(0, .32+adjust);
                }else if(x < 0){
                    Robot.drive.arcade(0, -.32+adjust);
                    System.out.println(-.32+adjust);
                }
            }
        }else{
            Robot.drive.arcade(0, 0);
            Robot.oi.setOperatorRumble(.5, .5);
        }
            
        }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.limelight.setLight(1);
        Robot.limelight.setMode(1);
        Robot.oi.setOperatorRumble(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
