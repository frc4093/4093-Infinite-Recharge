// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;


import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.subsystems.Limelight.CamMode;
import frc.robot.subsystems.Limelight.LEDMode;

/**
 *
 */
public class AutoAlign extends Command {
    public double x;
    public double absX;
    private int count;
    private int autoDir =0;
    private double y = 0;
    // public final double kP = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    public AutoAlign(int dir) {
        autoDir = dir;
        requires(Robot.drive);
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoAlign() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    autoDir = -1;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.limelight.setLight(LEDMode.ON);
        Robot.limelight.setCameraMode(CamMode.VISION);
        count = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() { 
        if (!Robot.limelight.targetInSight()){
            Robot.limelight.setCameraMode(CamMode.VISION);
            Robot.limelight.setLight(LEDMode.ON);
        }       
        if (Robot.limelight.targetInSight()== true){

            x = Robot.limelight.getTargetAngleX();
            absX = Math.abs(x);
            double adjust = (x/29.8)*.22;
             y = Robot.oi.getdriveGamepad().getRawAxis(1)*.5; //may or may not keep this
            if (absX>.8){
                if (x > 0){
                    //System.out.println(.32+adjust);
                    Robot.drive.arcade(y, .13+adjust*.7,false);
                }else if(x < 0){
                    Robot.drive.arcade(y, -.13+adjust*.7,false);
                    //System.out.println(-.32+adjust);
                }
        }else{
            count++;
            Robot.drive.arcade(y, 0,false);
            //Robot.oi.setOperatorRumble(.5, .5);
        }
    }else{
        if (Robot.getAuto()){
            //seek
            Robot.drive.arcade(0,-.2,false); // kind of an poor way to find target if were not
        }else{
            Robot.drive.arcade(y*.5*autoDir, Robot.oi.getdriveGamepad().getRawAxis(4)*.3,false);
           // Robot.drive.tank(Robot.oi.getdriveGamepad().getRawAxis(1)*-.7, Robot.oi.getdriveGamepad().getRawAxis(5)*-.7, true);
        }
            
    }
}
        
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        //could be better work around for driver align is rough
        return (count>10)&&!((Robot.oi.getdriveGamepad().getRawButton(2))||Robot.oi.getoperatorGamepad().getRawButton(3)||Robot.oi.getdriveGamepad().getRawButton(3));
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.limelight.setLight(LEDMode.OFF);
        Robot.limelight.setCameraMode(CamMode.DRIVER);
        Robot.oi.setOperatorRumble(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
