// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;

/**
 *
 */
public class Start_Shooter extends Command {
    boolean m_Quit_When_Stable;
    int count;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Start_Shooter(boolean Quit_When_Stable) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        count = 0;
        
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double currentRPM = Robot.shooter.getShooter_RPM();
        Robot.shooter.shootAtRPM();
        Robot.dash.displayData("set rpm", Robot.shooter.setRPM);
        Robot.dash.displayData("RPM", currentRPM); //makes a cool graph we can get an idea of the adjustments needed for my "proportional" control
        if (Robot.shooter.isReady() && m_Quit_When_Stable){
            count++;
        }else{
            count = 0;
        }
        //these will be properly mapped
        if (Robot.oi.operatorGamepad.getPOV() == 0){
            Robot.shooter.setRPM(Robot.shooter.getSetRPM()+10);
            //m_RPM+=10;
        }else if (Robot.oi.operatorGamepad.getPOV() == 180){
            //m_RPM-=10;
            Robot.shooter.setRPM(Robot.shooter.getSetRPM()-10);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return (count>8 && m_Quit_When_Stable);
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
